package cn.net.yto.ui;

import java.util.ArrayList;
import java.util.List;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.support.v4.view.ViewPager;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.ListView;
import android.widget.TextView;
import cn.net.yto.R;
import cn.net.yto.application.AppContext;
import cn.net.yto.biz.BasicDataManager;
import cn.net.yto.biz.OrderManager;
import cn.net.yto.common.Constants;
import cn.net.yto.utils.DialogHelper;
import cn.net.yto.vo.EffectiveTypeVO;
import cn.net.yto.vo.OrderChannelVO;
import cn.net.yto.vo.OrderVO;

public class OrderTabDetailItem extends ViewPageItemAbs{

	private View mRootView;
	
	private OrderTabActivity mOrderTab;
	private OrderVO mOrderVO;
	private ListView mListView;
	private OrderDetailAdapter mOrderDetailAdapter;
	private Button mLeftBtn;
	private Button mRightBtn;
	private Button mUsualReceiveBtn;
	private Button mUnusualReceiveBtn;

	private List<KeyValue> mOrderDetailList;
	
	OrderTabDetailItem(Activity context, ViewPager viewPager) {
		super(context, viewPager);
		
		LayoutInflater inflater = mContext.getLayoutInflater();
		mRootView = inflater.inflate(R.layout.activity_order_detail, null);
		
		initContext();
		initViews();
	}
	
	private void initContext() {
		mOrderTab = OrderTabActivity.getOrderTab();
		mOrderDetailList = new ArrayList<KeyValue>();
//		mOrderVO = tab.getOrders().get(tab.getSelectedIdx());
//		mOrderVO = new OrderVO();
		if(mOrderVO == null) return;
		convertOrderToDispMap();
	}
	
	@Override
	public void onPageSelected() {
		super.onPageSelected();
		if(mOrderTab.getOrders()!= null && mOrderTab.getOrders().size() > mOrderTab.getSelectedIdx()) {
			mOrderVO = mOrderTab.getOrders().get(mOrderTab.getSelectedIdx());			
		} else{
			mOrderVO = null;
		}
		mOrderDetailList.clear();
		if(mOrderVO == null) {
			DialogHelper.showToast(mOrderTab, R.string.order_tips_select_data);
			mUsualReceiveBtn.setEnabled(false);
			mUnusualReceiveBtn.setEnabled(false);
			mOrderDetailAdapter.notifyDataSetChanged();
			return;
		}
		mUsualReceiveBtn.setEnabled(isSwitchTo());
		mUnusualReceiveBtn.setEnabled(isSwitchTo());
		updateOrderState();
		convertOrderToDispMap();
		mOrderDetailAdapter.notifyDataSetChanged();
	}
	
	private void convertOrderToDispMap(){
		addOneKeyValue(R.string.order_number, mOrderVO.getOrderNo());
		int state = Integer.parseInt(mOrderVO.getAdditionState());
		if(state == OrderManager.STATE_CANCELED
				|| state == OrderManager.STATE_CANCELED_READED){
			addOneKeyValue(R.string.order_state, mContext.getString(R.string.state_unusual));

		} else{
			addOneKeyValue(R.string.order_state, mContext.getString(R.string.state_normal));
		}
		addOneKeyValue(R.string.sender_name, mOrderVO.getSenderName());
		addOneKeyValue(R.string.sender_address, mOrderVO.getSenderAddress());
		addOneKeyValue(R.string.sender_mobile, mOrderVO.getSenderMobile());
		addOneKeyValue(R.string.sender_phone, mOrderVO.getSenderPhone());
		addOneKeyValue(R.string.during_time, mOrderVO.getStartCanvassTime()+"   "+mOrderVO.getEndCanvassTime());
		addOneKeyValue(R.string.remark, mOrderVO.getRemark());
		addOneKeyValue(R.string.goods_content, mOrderVO.getGoodsContent());
		addOneKeyValue(R.string.order_way, getOrderChannelByCode(mOrderVO.getOrderChannelCode()));
		addOneKeyValue(R.string.recipient_name, mOrderVO.getRecipientName());
		addOneKeyValue(R.string.recipient_address, mOrderVO.getRecipientAddress());
		addOneKeyValue(R.string.recipient_phone, mOrderVO.getReceiverPhone());
		String codeType = mOrderVO.getOrderTypeCode();
		addOneKeyValue(R.string.order_type_tode, getEffectiveByCode(codeType));
		addOneKeyValue(R.string.weight, "" + mOrderVO.getGoodsTotalWeight());
		addOneKeyValue(R.string.order_create_time, mOrderVO.getOrderCreateTime());
		addOneKeyValue(R.string.employ_code, mOrderVO.getEmpCode());
		addOneKeyValue(R.string.accept_time, mOrderVO.getDownLoadTime());
		
//		addOneKeyValue(R.string.order_channel_code, mOrderVO.getOrderChannelCode());
//		addOneKeyValue(R.string.sender_id, mOrderVO.getSenderId());
	}
	
	private String getOrderChannelByCode(String code){
		List<OrderChannelVO> orderChannels = BasicDataManager.getInstance().getOrderChannelList();
		for(int i = 0; i < orderChannels.size(); i++){
			OrderChannelVO vo = orderChannels.get(i);
			if(code.equals(vo.getOrderChannelCode())){
				return vo.getOrderChannelName();
			}
		}
		return "";
	}
	
	private String getEffectiveByCode(String code){
		List<EffectiveTypeVO> effectives = BasicDataManager.getInstance().getEffectiveTypeList();
		for(int i = 0; i < effectives.size(); i++){
			EffectiveTypeVO vo = effectives.get(i);
			if(code.equals(vo.getCode())){
				return vo.getName();
			}
		}
		return "";
	}
	
	private void addOneKeyValue(int resId, String content){
		KeyValue kv = new KeyValue();
		kv.key = resId;
		kv.value = content;
		mOrderDetailList.add(kv);
	}

	private void initViews() {

		mLeftBtn = (Button) mRootView.findViewById(R.id.preview_btn);
		mLeftBtn.setOnClickListener(new View.OnClickListener() {
			@Override
			public void onClick(View arg0) {
				if(mOrderVO == null) return;
				int idx = mOrderTab.getSelectedIdx() - 1;
				if(idx < 0) idx = mOrderTab.getOrders().size()-1;
				mOrderTab.setSelectedIdx(idx);
				mOrderVO = mOrderTab.getOrders().get(mOrderTab.getSelectedIdx());
				mOrderDetailList.clear();
				convertOrderToDispMap();
				mOrderDetailAdapter.notifyDataSetChanged();
				updateOrderState();
			}
		});
		mRightBtn = (Button) mRootView.findViewById(R.id.next_btn);
		mRightBtn.setOnClickListener(new View.OnClickListener() {
			@Override
			public void onClick(View arg0) {
				if(mOrderVO == null) return;
				int idx = mOrderTab.getSelectedIdx() + 1;
				if(idx == mOrderTab.getOrders().size()) idx = 0;
				mOrderTab.setSelectedIdx(idx);
				mOrderVO = mOrderTab.getOrders().get(mOrderTab.getSelectedIdx());
				mOrderDetailList.clear();
				convertOrderToDispMap();
				mOrderDetailAdapter.notifyDataSetChanged();
				updateOrderState();
			}
		});

		mUsualReceiveBtn = (Button) mRootView.findViewById(R.id.usual_receive_btn);
		mUsualReceiveBtn.setOnClickListener(new View.OnClickListener() {
			@Override
			public void onClick(View v) {
				if(mOrderVO == null) return;
				if(!isSwitchTo()) return;
				Intent intent = new Intent();
				intent.setAction(Constants.ACTION_ADD_RECEIVE);
//				intent.setClass(mOrderTab, ReceiveExpressPageActivity.class);
				intent.putExtra("order", mOrderVO);
				mOrderTab.startActivity(intent);
				mOrderTab.onBackPressed();
				
			}
		});
		
		mUnusualReceiveBtn  = (Button) mRootView.findViewById(R.id.unusual_receive_btn);
		mUnusualReceiveBtn.setOnClickListener(new View.OnClickListener() {
			@Override
			public void onClick(View v) {
				if(mOrderVO == null) return;
				if(!isSwitchTo()) return;
				Intent intent = new Intent();
				intent.setClass(mOrderTab, ReceiveNoOrderUnusualActivity.class);
				intent.putExtra("order", mOrderVO);
				mOrderTab.startActivity(intent);
			}
		});

		mListView = (ListView) mRootView.findViewById(android.R.id.list);

		mOrderDetailAdapter = new OrderDetailAdapter(mContext, mOrderDetailList);
		mListView.setAdapter(mOrderDetailAdapter);
		mListView.setSelected(false);
		mListView.setFocusable(false);
		mListView.setFastScrollEnabled(true);
		mListView.setDividerHeight(0);
	}

	class KeyValue{
		int key;
		String value;
	}
	
	private void updateOrderState(){
		int state = -1;
		if(mOrderVO.getAdditionState()!=null){
			state = Integer.parseInt(mOrderVO.getAdditionState());
		}
		boolean update = false;
		if(state == OrderManager.STATE_INIT){
			update = true;
			mOrderVO.setAdditionState(String.valueOf(OrderManager.STATE_INIT_READED));
		} else if(state == OrderManager.STATE_CANCELED){
			update = true;
			mOrderVO.setAdditionState(String.valueOf(OrderManager.STATE_CANCELED_READED));
		} else if(state == OrderManager.STATE_ENERGED){
			update = true;
			mOrderVO.setAdditionState(String.valueOf(OrderManager.STATE_ENERGED_READED));
		}
		if(update){
			OrderManager.getInstance().updateOrder(mOrderVO, state);
		}
	}
	
	private boolean isSwitchTo(){
		int state = Integer.parseInt(mOrderVO.getAdditionState());
		if(OrderManager.STATE_INIT == state 
				|| OrderManager.STATE_INIT_READED == state
				|| OrderManager.STATE_ENERGED == state
				|| OrderManager.STATE_ENERGED_READED == state){
			return true;
		}
		return false;
	}
	
	private class OrderDetailAdapter extends ArrayAdapter<KeyValue> {
		public OrderDetailAdapter(Context context, List<KeyValue> orderList) {
			super(context, 0, orderList);
		}

		@Override
		public View getView(int position, View convertView, ViewGroup parent) {
			final KeyValue kv = mOrderDetailList.get(position);

			if (convertView == null) {
				final LayoutInflater inflater = mContext.getLayoutInflater();
				convertView = inflater.inflate(R.layout.list_order_detail_item,
						parent, false);
			}

			TextView text = (TextView) convertView.findViewById(R.id.key_text);
			text.setText(mContext.getString(kv.key));


			text = (TextView) convertView.findViewById(R.id.value_text);
			text.setText(kv.value);
			return convertView;
		}
	}

	@Override
	public View getItemView() {
		return mRootView;
	}
}
