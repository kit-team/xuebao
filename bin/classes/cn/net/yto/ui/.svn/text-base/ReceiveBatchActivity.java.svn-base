package cn.net.yto.ui;

import java.util.ArrayList;
import java.util.List;

import android.content.Context;
import android.graphics.Color;
import android.os.Bundle;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.View.OnKeyListener;
import android.view.ViewGroup;
import android.view.Window;
import android.view.inputmethod.EditorInfo;
import android.view.inputmethod.InputMethodManager;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.AdapterView.OnItemSelectedListener;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ListView;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.TextView.OnEditorActionListener;
import cn.net.yto.R;
import cn.net.yto.biz.BarcodeManager;
import cn.net.yto.biz.BasicDataManager;
import cn.net.yto.biz.BasicDataManager.CitySearch;
import cn.net.yto.biz.ReceiveManager;
import cn.net.yto.common.Constants;
import cn.net.yto.utils.CommonUtils;
import cn.net.yto.utils.DialogHelper;
import cn.net.yto.utils.LogUtils;
import cn.net.yto.vo.CityVO;
import cn.net.yto.vo.EffectiveTypeVO;
import cn.net.yto.vo.ReceiveVO;

import com.zltd.android.scan.ScanManager;
import com.zltd.android.scan.ScanResultListener;
import com.zltd.android.scan.impl.OneDimensionalSanManager;

public class ReceiveBatchActivity extends BaseActivity implements
		OnClickListener {
	private EditText mDesCitySearchEdit;
	private EditText mPriceEdit;
	private EditText mWayBillEdit;
	private Button mBackBtn;
	private Button mDeleteBtn;
	private Button mSaveBtn;
	private ArrayList<ReceiveVO> mReceiveList;
	private int mCurSelListItem = 0;
	private ReceiveAdapter mListAdapter;
	private ListView mListView;
	private int selectedId = -1;
	private TextView mTitleText;

	private BasicDataManager mBasicDataManager;
	private BarcodeManager mBarcodeManager;
	private ReceiveManager mReceiveManager;
	private List<CityVO> mCityList;
	private List<EffectiveTypeVO> mEffectiveTypeList;
	private Spinner mCitySpinner;
	private Spinner mEffectiveSpinner;
	private ReceiveVO mCurReceiveVO;
	private boolean mAddMode = true;
	private boolean mCitySpinnerManulOperation;
	InputMethodManager mInputMethodManager;
	private CitySearch mCitySearchInfo;
	private ScanResultListener mScanResultListener = new ScanResultListener() {
		@Override
		public void onScan(ScanManager arg0, byte[] scanResultDate) {
			if (scanResultDate != null) {
				String barcode = new String(scanResultDate);
				mAddMode = true;
				if (addWaybillNo(barcode)) {
					playSound(Constants.SOUND_TYPE_SUCCESS);
				} else {
					playSound(Constants.SOUND_TYPE_WARNING);
				}
			}
			mVibrator.vibrate(39);
		}
	};
	private OneDimensionalSanManager mScanManager;
	private ArrayAdapter<CityVO> mCitySpinnerAdapter;
	private TextView mSizeText;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		initContext();
		initViews();

		mScanManager = new OneDimensionalSanManager(mContext);
		mScanManager.setEnable(true);
		mScanManager.registerResultListener(mScanResultListener);
	}

	@Override
	protected void onStart() {
		hideInputMethod(mWayBillEdit);
		super.onStart();
	}

	@Override
	protected void onDestroy() {
		mScanManager.unregisterResultListener();
		mScanManager.setEnable(false);
		mScanManager = null;
		super.onDestroy();
	}

	private void initContext() {
		mReceiveManager = ReceiveManager.getInstance();
		mBasicDataManager = BasicDataManager.getInstance();
		mBarcodeManager = BarcodeManager.getInstance();
		mCityList = new ArrayList<CityVO>();
		mEffectiveTypeList = new ArrayList<EffectiveTypeVO>();
		mEffectiveTypeList.addAll(mBasicDataManager.getEffectiveTypeList());

		mReceiveList = new ArrayList<ReceiveVO>();
		
		mInputMethodManager = (InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);    
	}

	private void displayCitySearchResult(CitySearch cs) {
		if (cs == null || (cs.targetCity == null && cs.cityList == null)) {
			DialogHelper.showToast(mContext, R.string.city_search_failed);
			return;
		}

		if (cs.targetCity != null) {
			mDesCitySearchEdit.setText(cs.targetCity.getCityName());
		}

		if (cs.cityList != null) {
			mCityList.clear();
			mCityList.addAll(cs.cityList);
			mCitySpinnerManulOperation = true;
			mCitySpinnerAdapter.notifyDataSetChanged();
		}
	}

	private void initViews() {
		requestWindowFeature(Window.FEATURE_CUSTOM_TITLE);
		setContentView(R.layout.activity_receive_batch);
		getWindow().setFeatureInt(Window.FEATURE_CUSTOM_TITLE,
				R.layout.custom_title);
		setTitleInfo(R.string.receive_batch);

		mDesCitySearchEdit = (EditText) findViewById(R.id.des_city_edit);
		mDesCitySearchEdit.setOnKeyListener(new OnKeyListener() {
			@Override
			public boolean onKey(View v, int keyCode, KeyEvent event) {
				if (event != null && keyCode == KeyEvent.KEYCODE_DPAD_CENTER) {
					if (event.getAction() == KeyEvent.ACTION_DOWN) {
						String key = mDesCitySearchEdit.getText().toString();
						mDesCitySearchEdit.setText("");
						if (CommonUtils.isEmpty(key)) {
							DialogHelper.showToast(mContext,
									R.string.input_city_search_tips);
						} else {
							CitySearch cs = mBasicDataManager
									.searchCityList(key);
							displayCitySearchResult(cs);
						}
					}
					return true;
				}
				return false;
			}
		});
		mDesCitySearchEdit.setImeOptions(EditorInfo.IME_ACTION_SEARCH);
		mDesCitySearchEdit.setImeActionLabel(
				mContext.getString(R.string.query),
				EditorInfo.IME_ACTION_SEARCH);
		mDesCitySearchEdit
				.setOnEditorActionListener(new OnEditorActionListener() {
					@Override
					public boolean onEditorAction(TextView v, int actionId,
							KeyEvent event) {
						if (actionId == EditorInfo.IME_ACTION_SEARCH) {
							String key = mDesCitySearchEdit.getText()
									.toString();
							mDesCitySearchEdit.setText("");
							if (CommonUtils.isEmpty(key)) {
								DialogHelper.showToast(mContext,
										R.string.input_city_search_tips);
							} else {
								CitySearch cs = mBasicDataManager
										.searchCityList(key);
								displayCitySearchResult(cs);
							}
							return true;
						}
						return false;
					}
				});

		mCitySpinner = (Spinner) findViewById(R.id.des_city_spinner);
		mCitySpinnerAdapter = new ArrayAdapter<CityVO>(mContext,
				android.R.layout.simple_spinner_item, mCityList);
		mCitySpinnerAdapter
				.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
		mCitySpinner.setAdapter(mCitySpinnerAdapter);

		mEffectiveSpinner = (Spinner) findViewById(R.id.effective_spinner);
		ArrayAdapter<EffectiveTypeVO> effectiveAdapter = new ArrayAdapter<EffectiveTypeVO>(
				mContext, android.R.layout.simple_spinner_item,
				mEffectiveTypeList);
		effectiveAdapter
				.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
		mEffectiveSpinner.setAdapter(effectiveAdapter);
		mEffectiveSpinner.setSelection(mBasicDataManager.getDefaultEffectiveTypeIndex());
		

		mPriceEdit = (EditText) findViewById(R.id.price_edit);
		mPriceEdit.setOnKeyListener(new OnKeyListener() {
			@Override
			public boolean onKey(View v, int keyCode, KeyEvent event) {
				if(event != null && keyCode == KeyEvent.KEYCODE_DPAD_CENTER){
					String barcode = mWayBillEdit.getText().toString();
					if(mBarcodeManager.isWayBillNoValid(barcode)){
						addWaybillNo(barcode);
					}
					return true;
				}
				return false;
			}
		});
		mWayBillEdit = (EditText) findViewById(R.id.way_bill_no_edit);
		mWayBillEdit.setOnKeyListener(new OnKeyListener() {
			@Override
			public boolean onKey(View v, int keyCode, KeyEvent event) {
				if(event != null && keyCode == KeyEvent.KEYCODE_DPAD_CENTER){
					if(event.getAction() == KeyEvent.ACTION_DOWN){
						String barcode = mWayBillEdit.getText().toString();
						addWaybillNo(barcode);
					}
					return true;
				}
				return false;
			}
		});
		
		mSizeText = (TextView)findViewById(R.id.size_text);

		mBackBtn = (Button) findViewById(R.id.btn_back);
		mDeleteBtn = (Button) findViewById(R.id.btn_delete);
		if (mReceiveList.size() < 1) {
			mDeleteBtn.setEnabled(false);
		}
		mSaveBtn = (Button) findViewById(R.id.btn_save);
		mBackBtn.setOnClickListener(this);
		mDeleteBtn.setOnClickListener(this);
		mSaveBtn.setOnClickListener(this);
		mSaveBtn.setEnabled(false);

		mListView = (ListView) findViewById(android.R.id.list);
		View headView = getLayoutInflater().inflate(R.layout.view_batch_receive_head, null);
		mListView.addHeaderView(headView, null, false);
		mListAdapter = new ReceiveAdapter(this,
				R.layout.view_batch_receive_list, mReceiveList);
		mListView.setAdapter(mListAdapter);
		mListView.setItemsCanFocus(true);
		mListView.setSelected(true);
		mListView.setFocusable(true);
		mListView.setFocusableInTouchMode(true);
		mListView.setFastScrollEnabled(true);
		mListView.setDividerHeight(0);
		
		
		mListView.setOnItemClickListener(new OnItemClickListener() {
			@Override
			public void onItemClick(AdapterView<?> arg0, View arg1, int position,
					long arg3) {
				mCurReceiveVO = mReceiveList.get(position - 1);
				LogUtils.i(TAG, "onItemClick positon = " + position);
				initViewByReceiveInfo(mCurReceiveVO);
				mAddMode = false;
				mCurSelListItem = position - 1;
				mListAdapter.notifyDataSetChanged();
				mWayBillEdit.setEnabled(false);
			}
		});
		mListView.setOnItemSelectedListener(new OnItemSelectedListener() {
			@Override
			public void onItemSelected(AdapterView<?> arg0, View arg1,
					int position, long arg3) {
				mCurReceiveVO = mReceiveList.get(position - 1);
				LogUtils.i(TAG, "onItemClick positon = " + position);
				initViewByReceiveInfo(mCurReceiveVO);
				mAddMode = false;
				mCurSelListItem = position - 1;
				mListAdapter.notifyDataSetChanged();
				mWayBillEdit.setEnabled(false);
			}

			@Override
			public void onNothingSelected(AdapterView<?> arg0) {
			}
		});
	}

	@Override
	public void onClick(View v) {
		switch (v.getId()) {
		case R.id.btn_back:
//			if(mInputMethodManager.isActive()){
//					mInputMethodManager.toggleSoftInput(InputMethodManager.SHOW_IMPLICIT, InputMethodManager.HIDE_NOT_ALWAYS);   
//			} else{
				onBackPressed();
//			}
			break;
		case R.id.btn_delete:
			onDeleteBtnClicked();
			break;
		case R.id.btn_save:
			onSaveBtnClicked();
			break;
		}
	}

	private void onDeleteBtnClicked() {
		if(mReceiveList.size() > mCurSelListItem && mCurSelListItem >= 0){
			ReceiveVO vo = mReceiveList.get(mCurSelListItem);
			mReceiveList.remove(mCurSelListItem);
			mReceiveManager.deleteReceive(vo.getWaybillNo());
			mListAdapter.notifyDataSetChanged();
			clear();
		}
		
		int size = mReceiveList.size();
		if(size < 1){
			mDeleteBtn.setEnabled(false);
			mSaveBtn.setEnabled(false);
		}
		mSizeText.setText("" + size);
		
		if(mCurSelListItem >= size){
			mCurSelListItem = size - 1;
		}
	}

	private void clear() {
		mWayBillEdit.setText("");
		mWayBillEdit.setEnabled(true);
		
		mAddMode = true;
	}

	private void initViewByReceiveInfo(ReceiveVO vo) {
		clear();

		if (!CommonUtils.isEmpty(vo.getCityId())) {
			CityVO city = mBasicDataManager.getCityById(vo.getCityId());
			
			if (city != null && city.getCityName() != null) {
				CityVO pCity = mBasicDataManager.getParentCityById(city.getParentCityCode());
				List<CityVO> list = mBasicDataManager.getChildrenCityList(city.getParentCityCode());
				
				if(pCity != null && pCity.getCityName() != null){
					mDesCitySearchEdit.setText(pCity.getCityName());
				}
				
				if(list == null || list.size() < 1){
					list = new ArrayList<CityVO>();
					list.add(city);
				}
				
				if(list != null && list.size() > 0){
					mCityList.clear();
					mCityList.addAll(list);
					mCitySpinnerAdapter.notifyDataSetChanged();
					for(int i = 0; i < list.size(); i++){
						CityVO c = list.get(i);
						if(vo.getCityId().equals(c.getId())){
							mCitySpinner.setSelection(i);
							break;
						}
					}
				}
			}
		}

		if (!CommonUtils.isEmpty(vo.getWaybillNo())) {
			mWayBillEdit.setText(vo.getWaybillNo());
		}

		if (!CommonUtils.isEmpty(vo.getFeeAmt())) {
			mPriceEdit.setText(vo.getFeeAmt());
		}

		if (!CommonUtils.isEmpty(vo.getPracticalType())
				&& mEffectiveTypeList.size() > 0) {
			int i = 0;
			for (; i < mEffectiveTypeList.size(); i++) {
				String tempCode = mEffectiveTypeList.get(i).getCode();
				if (!CommonUtils.isEmpty(tempCode)
						&& tempCode.equals(vo.getPracticalType())) {
					mEffectiveSpinner.setSelection(i);
					break;
				}
			}

			if (i == mEffectiveTypeList.size()) {
				mEffectiveSpinner.setSelection(mBasicDataManager
						.getDefaultEffectiveTypeIndex());
			}
		}
	}

	private void onSaveBtnClicked() {
		if (mReceiveList.size() > 0) {
			for (ReceiveVO vo : mReceiveList) {
				mReceiveManager.backgroundSubmitReceive(vo);
			}
			mReceiveList.clear();
			mListAdapter.notifyDataSetChanged();
			DialogHelper.showToast(mContext, R.string.receive_normal_save_success_tips);
			mSizeText.setText("0");
		} else {
			DialogHelper.showToast(mContext, R.string.save_no_item_tips);
		}
	}
	
	private boolean addWaybillNo(String barcode) {
		hideInputMethod(mWayBillEdit);
		
		if (CommonUtils.isEmpty(barcode)) {
			return false;
		}
		
		if (!mBarcodeManager.isWayBillNoValid(barcode)) {
			DialogHelper.showToast(mContext, R.string.way_bill_no_invalid_tips);
			return false;
		}
		
		boolean retVal = false;

		if (mCurReceiveVO == null) {
			mCurReceiveVO = new ReceiveVO();
		}

		mCurReceiveVO.setWaybillNo(barcode);
		// mCurReceiveVO.setCityId(mDesCitySearchEdit.getText().toString());
		if (mCityList.size() > 0) {
			mCurReceiveVO.setCityId(mCityList.get((int) mCitySpinner.getSelectedItemId()).getId());
			mCurReceiveVO.setDesOrgCode(mCityList.get((int) mCitySpinner.getSelectedItemId()).getCenterCode());
		}
		mCurReceiveVO.setFeeAmt(mPriceEdit.getText().toString());

		mCurReceiveVO.setPracticalType(mEffectiveTypeList.get(
				(int) mEffectiveSpinner.getSelectedItemId()).getCode());

		int result = 0;

		if (mAddMode) {
			result = mReceiveManager.saveReceive(mCurReceiveVO);
		} else {
			result = mReceiveManager.updateReceive(mCurReceiveVO);
		}

		if (result == ReceiveManager.SAVE_RESULT_SUCCESS) {
			if (!mReceiveList.contains(mCurReceiveVO)) {
				mReceiveList.add(0, mCurReceiveVO);
			}
			mCurSelListItem = 0;
			mListAdapter.notifyDataSetChanged();
			DialogHelper.showToast(mContext, R.string.operate_success);
			retVal = true;
		} else if (result == ReceiveManager.SAVE_RESULT_FAILED_EXIST) {
			DialogHelper.showToast(mContext, R.string.repeat_receive_tips);
		} else {
			DialogHelper.showToast(mContext, R.string.operate_fail);
		}
		mCurReceiveVO = null;
		clear();
		
		int size = mReceiveList.size();
		if(size > 0){
			mDeleteBtn.setEnabled(true);
			mSaveBtn.setEnabled(true);
		}
		mSizeText.setText("" + size);
		
		return retVal;
	}

	private class ReceiveAdapter extends ArrayAdapter<ReceiveVO> {
		protected final static int COLOR_DEFAULT = Color.WHITE;
	    protected final static int COLOR_SELECTED = Color.GRAY;
		public ReceiveAdapter(Context context, int textViewResourceId,
				ArrayList<ReceiveVO> items) {
			super(context, textViewResourceId, items);
		}

		@Override
		public View getView(int position, View convertView, ViewGroup parent) {
			View v = convertView;
			if (v == null) {
				LayoutInflater vi = (LayoutInflater) getSystemService(Context.LAYOUT_INFLATER_SERVICE);
				v = vi.inflate(R.layout.view_batch_receive_list, null);
				v.setVisibility(View.VISIBLE);
			}
			ReceiveVO o = mReceiveList.get(position);
			
			if (o != null) {
				TextView wayBillNoText = (TextView) v
						.findViewById(R.id.way_bill_no_text);
				if (wayBillNoText != null) {
					wayBillNoText.setText(o.getWaybillNo());
				}
				

				TextView datetimeText = (TextView) v
						.findViewById(R.id.datetime_text);
				datetimeText.setText(o.getSalesmanTime().substring(5));

				TextView priceText = (TextView) v.findViewById(R.id.price_text);
				priceText.setText(o.getFeeAmt());
				
				if(position == mCurSelListItem){
					wayBillNoText.setBackgroundColor(COLOR_SELECTED);
					datetimeText.setBackgroundColor(COLOR_SELECTED);
					priceText.setBackgroundColor(COLOR_SELECTED);
				} else {
					wayBillNoText.setBackgroundColor(COLOR_DEFAULT);
					datetimeText.setBackgroundColor(COLOR_DEFAULT);
					priceText.setBackgroundColor(COLOR_DEFAULT);
				}
			}
			return v;
		}
	}
}
