package cn.net.yto.ui;

import java.util.ArrayList;
import java.util.List;
import java.util.Observable;
import java.util.Observer;

import android.app.Activity;
import android.app.Dialog;
import android.app.ProgressDialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.view.KeyEvent;
import android.view.View;
import android.view.Window;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.GridView;
import android.widget.TextView;
import android.widget.Toast;
import cn.net.yto.R;
import cn.net.yto.biz.BasicDataManager;
import cn.net.yto.biz.BasicDataManager.InitialDataListener;
import cn.net.yto.biz.OrderManager;
import cn.net.yto.biz.ReceiveManager;
import cn.net.yto.biz.UserManager;
import cn.net.yto.common.Constants;
import cn.net.yto.common.NetworkUnavailableException;
import cn.net.yto.service.YtoBizService;
import cn.net.yto.ui.menu.MenuAction;
import cn.net.yto.ui.menu.MenuItem;
import cn.net.yto.ui.menu.GridMenuItemAdapter;
import cn.net.yto.utils.DialogHelper;
import cn.net.yto.vo.OrderVO;

public class MainMenuActivity extends BaseActivity implements Observer{
	
	private static final String TAG = "MainMenuActivity";
	
	private final int PROGRESS_DLG = 1;
	
	private ProgressDialog mProDlg;
	private GridView mGridView;
	private TextView mTitleView;
	private ArrayList<MenuItem> mMenuItemList = new ArrayList<MenuItem>();
	private UserManager mUserService;
	private GridMenuItemAdapter mAdapter;
	private MenuItem mOrderItem;
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
			
		initContext();
		
		
		
		initMenuItem();
		initViews();
		
		// 注册订单处理observer， 用来更新界面
		registerObserver();
		
		// 下载基础数据
		downloadBasicData();	
		
		
		
		// 获取未处理订单数量，显示在ui
		getUnhandleOrderSize();
	}

	@Override
	protected Dialog onCreateDialog(int id) {
		switch(id) {
		case PROGRESS_DLG:
			mProDlg = ProgressDialog.show(this, "", 
					getString(R.string.initialBasicData), true);
			return mProDlg;
		}
		
		return null;
	}

	@Override
	protected void onStart() {
		super.onStart();
		
		StringBuffer sb = new StringBuffer();
		sb.append(getString(R.string.main_menu));
		
		setTitleInfo(sb.toString());
	}

	@Override
	protected void onDestroy() {
		super.onDestroy();
		YtoBizService.cancelDownloadOrder();
		YtoBizService.cancelUploadRepeatAlarm();
		
		unRegisterObserver();
	}

	@Override
	public boolean onKeyUp(int keyCode, KeyEvent event) {
		boolean result = true;

		switch (keyCode) {
		case KeyEvent.KEYCODE_BACK:
		case KeyEvent.KEYCODE_STAR:
			exitAppDialog();
			break;

//		case 29:// F1
//			CommonUtils.startWifiSettingActivity(mContext);
//			break;

		case KeyEvent.KEYCODE_1:
		case KeyEvent.KEYCODE_2:
		case KeyEvent.KEYCODE_3:
		case KeyEvent.KEYCODE_4:
		case KeyEvent.KEYCODE_5:
		case KeyEvent.KEYCODE_6:
		case KeyEvent.KEYCODE_7:
		case KeyEvent.KEYCODE_8:
		case KeyEvent.KEYCODE_9:
			int index = keyCode - KeyEvent.KEYCODE_1;
			if (index >= 0 && index < mMenuItemList.size()) {
				mMenuItemList.get(index).doAction();
			}
			break;
		default:
			result = false;
			break;
		}
		if (result) {
			return true;
		}
		return super.onKeyDown(keyCode, event);
	}

	private void initViews() {
		requestWindowFeature(Window.FEATURE_CUSTOM_TITLE);
		setContentView(R.layout.activity_main_menu);
		getWindow().setFeatureInt(Window.FEATURE_CUSTOM_TITLE, R.layout.custom_title);

		mGridView = (GridView) findViewById(R.id.gridview);
		mAdapter = new GridMenuItemAdapter(this, mMenuItemList);
		mGridView.setAdapter(mAdapter);
		mGridView.setOnItemClickListener(new OnItemClickListener() {
			@Override
			public void onItemClick(AdapterView<?> arg0, View arg1,
					int position, long id) {
				mMenuItemList.get(position).doAction();
			}
		});
		
		setTitle(R.string.receive);

//		mTitleView = (TextView) findViewById(R.id.title_text);
//		mTitleView.setText(R.string.receive);
	}

	private void initMenuItem() {
	//	addMenuItem(R.drawable.mainmenu_order, R.string.order_manage, 0, OrderTabActivity.class);
		
		List<OrderVO> unhandleOrders = OrderManager.getInstance().queryUnhandle();
		int orders = (unhandleOrders != null) ? unhandleOrders.size() : 0;
		addMenuItem(R.drawable.mainmenu_receive, R.string.receive, orders, ReceiveMenuActivity.class);
		addMenuItem(R.drawable.mainmenu_deliver, R.string.deliver, 0, DispatchMain.class);
		addMenuItem(R.drawable.mainmenu_query, R.string.msg_query, 0, null);
		addMenuItem(R.drawable.mainmenu_download, R.string.data_download, 0, DownloadBasicDataActivity.class);
		addMenuItem(R.drawable.mainmenu_assistant, R.string.my_assitant, 0, AssistantActivity.class);
		addMenuItem(R.drawable.mainmenu_pay, R.string.quick_pay, 0, QuickPayActivity.class);
		addMenuItem(R.drawable.mainmenu_bigquery, R.string.msg_bigquery, 0, null);
		
		
		addLogoutMenuItem(R.drawable.mainmenu_exit, R.string.cancel_account);
	}

	private void addMenuItem(int imgResId, int textResId, int unhandleMsg, final Class<? extends Activity> cls) {
		MenuAction action = new MenuAction() {
			@Override
			public void action() {
				if(cls != null){
					Intent intent = new Intent(mContext, cls);
					startActivity(intent);
				}
			}
		};
		MenuItem item = new MenuItem(imgResId, textResId, action);
		item.mUnhandleMsg = unhandleMsg;
		mMenuItemList.add(item);
		
		if (textResId == R.string.receive) {
			mOrderItem = item;
		}
	}
	
	private void addLogoutMenuItem(int imgResId, int textResId) {
		MenuAction action = new MenuAction() {
			@Override
			public void action() {
				exitAppDialog();
			}
		};
		MenuItem item = new MenuItem(imgResId, textResId, action);
		mMenuItemList.add(item);
	}

	private void initContext() {
		mUserService = mAppContext.getUserService();
//		mBasicDataManager = BasicDataManager.getInstance();
//		try {
//			mBasicDataManager.downloadBasicData();
//		} catch (NetworkUnavailableException e) {
//			showToast(R.string.network_error);
//		}
	}
	
	private void getUnhandleOrderSize() {
		List<OrderVO> list = OrderManager.getInstance().queryUnhandle();
		mOrderItem.mUnhandleMsg = list != null ? list.size() : 0;
		mAdapter.notifyDataSetChanged();
	}
	
	/**
	 * 第一次登录时要下载基础数据，如果下载失败则退出主界面。
	 * 如果已经成功下载过基础数据，则在后台进行数据的更新
	 */
	private void downloadBasicData() {
		boolean isInitial = BasicDataManager.getInstance().downloadBasicData(new InitialDataListener() {
			
			@Override
			public void onProgressUpdate(int progress) {
				mProDlg.setMessage(getString(R.string.initialBasicData) + " " + progress + "%");
			}
			
			@Override
			public void onPreInitial() {
				showDialog(PROGRESS_DLG);				
			}
			
			@Override
			public void onFinish(boolean result) {
				dismissDialog(PROGRESS_DLG);
				
				if (!result) {
					Toast.makeText(MainMenuActivity.this, getString(R.string.toast_download_basic_fail), Toast.LENGTH_SHORT).show();
					finish();
				} else {
					SharedPreferences.Editor editor = mSharedPreferences.edit();
					editor.putBoolean(Constants.KEY_HAS_BASIC_DATA, true);
					editor.commit();
					
					YtoBizService.startDownloadOrder();
					YtoBizService.startUploadRepeatAlarm();
					YtoBizService.synchSystemTime(MainMenuActivity.this);
					OrderManager.getInstance().updateOrdersState();
					ReceiveManager.getInstance().init();
				}
			}
		});
		
		if (!isInitial) {
			YtoBizService.startDownloadOrder();
			YtoBizService.startUploadRepeatAlarm();
			YtoBizService.synchSystemTime(this);
			OrderManager.getInstance().updateOrdersState();
			ReceiveManager.getInstance().init();
		}
	}

	private void registerObserver() {
		OrderManager.getInstance().addObserver(this);
	}
	
	private void unRegisterObserver() {
		OrderManager.getInstance().deleteObserver(this);
	}
	
	protected void exitAppDialog() {
		DialogHelper.showAlertDialog(this,
				getString(R.string.app_exit_message),
				new DialogInterface.OnClickListener() {
					@Override
					public void onClick(DialogInterface dialog, int which) {
						DialogHelper.closeAlertDialog();
						finish();
					}
				}, new DialogInterface.OnClickListener() {
					@Override
					public void onClick(DialogInterface dialog, int which) {
						DialogHelper.closeAlertDialog();
					}
				});
		playSound(Constants.SOUND_TYPE_QUERY);
		try {
			mUserService.loginOut(mContext, null);
		} catch (NetworkUnavailableException e) {
			showToast(R.string.network_error);
		}
	//	finish();
	}

	@Override
	public void update(Observable observable, Object data) {
	
		if (!(observable instanceof OrderManager) && data == null && !(data instanceof Boolean)) 
			return;
		
		if ((Boolean) data) { // true 表示添加了一个未处理订单
			mOrderItem.mUnhandleMsg++;		
			
		} else { // false 表示减少了一个未处理订单
			mOrderItem.mUnhandleMsg--;
		}
		if (mOrderItem.mUnhandleMsg < 0)
			mOrderItem.mUnhandleMsg = 0;
		
		mAdapter.notifyDataSetChanged();
	}
	
}