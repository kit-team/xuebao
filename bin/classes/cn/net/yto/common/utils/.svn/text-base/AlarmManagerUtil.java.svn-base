package cn.net.yto.common.utils;


import cn.net.yto.common.Constants;
import cn.net.yto.utils.LogUtils;
import android.app.AlarmManager;
import android.app.PendingIntent;
import android.content.Context;
import android.content.Intent;


/**
 * Alarm Manager Utils
 * 
 */
public class AlarmManagerUtil implements Constants {
	private static String TAG = "AlarmManagerUtil";
	
    public static AlarmManager getAlarmManager(Context ctx) {
        return (AlarmManager) ctx.getSystemService(Context.ALARM_SERVICE);
    }

    /**
     * Start the alarm after delay time
     * 
     * @param ctx
     */
    public static void sendAlarmBroadcast(Context ctx, long delayTime, Class<?> receiver) {
        LogUtils.i(TAG,"Send to start update broadcase,delay time :" + delayTime);

        AlarmManager am = getAlarmManager(ctx);

        Intent i = new Intent(ctx, receiver);
        PendingIntent pendingIntent = PendingIntent.getBroadcast(ctx, 0, i, PendingIntent.FLAG_CANCEL_CURRENT);
        if (delayTime == 0) {
            am.set(AlarmManager.RTC_WAKEUP, System.currentTimeMillis(), pendingIntent);
        } else {
            am.set(AlarmManager.RTC_WAKEUP, System.currentTimeMillis() + delayTime, pendingIntent);
        }
    }

    /**
     * Start the alarm after delay time
     * 
     * @param ctx
     */
    public static void sendAlarmBroadcast(Context ctx, long delayTime, Intent intent) {
        LogUtils.i(TAG,"Send to start update broadcase,delay time :" + delayTime);

        AlarmManager am = getAlarmManager(ctx);
        PendingIntent pendingIntent = PendingIntent.getBroadcast(ctx, 0, intent, PendingIntent.FLAG_CANCEL_CURRENT);
        if (delayTime == 0) {
            am.set(AlarmManager.RTC_WAKEUP, System.currentTimeMillis(), pendingIntent);
        } else {
            am.set(AlarmManager.RTC_WAKEUP, System.currentTimeMillis() + delayTime, pendingIntent);
        }
    }

    /**
     * Start the alarm after delay time
     * 
     * @param ctx
     * @param delayTime
     * @param receiver
     *            receiver action name
     */
    public static void sendAlarmBroadcast(Context ctx, long delayTime, String receiver) {
        LogUtils.i(TAG,"Send to start update broadcase,delay time :" + delayTime);

        AlarmManager am = getAlarmManager(ctx);

        Intent i = new Intent(receiver);
        PendingIntent pendingIntent = PendingIntent.getBroadcast(ctx, 0, i, PendingIntent.FLAG_CANCEL_CURRENT);
        if (delayTime == 0) {
            am.set(AlarmManager.RTC_WAKEUP, System.currentTimeMillis(), pendingIntent);
        } else {
            am.set(AlarmManager.RTC_WAKEUP, System.currentTimeMillis() + delayTime, pendingIntent);
        }
    }

    /**
     * Cancel the alarm
     * 
     * @param ctx
     * @param receiver
     *            receiver class
     */
    public static void cancelAlarmBroadcast(Context ctx, Class<?> receiver) {
        AlarmManager am = getAlarmManager(ctx);
        Intent i = new Intent(ctx, receiver);
        PendingIntent pendingIntent = PendingIntent.getBroadcast(ctx, 0, i, PendingIntent.FLAG_NO_CREATE);
        am.cancel(pendingIntent);
    }

    /**
     * Cancel the alarm
     * 
     * @param ctx
     * @param receiver
     *            receiver class
     */
    public static void cancelAlarmBroadcast(Context ctx, Intent intent) {
        AlarmManager am = getAlarmManager(ctx);
        PendingIntent pendingIntent = PendingIntent.getBroadcast(ctx, 0, intent, PendingIntent.FLAG_NO_CREATE);
        am.cancel(pendingIntent);
    }

    /**
     * Cancel the alarm
     * 
     * @param ctx
     * @param receiver
     *            receiver action name
     */
    public static void cancelAlarmBroadcast(Context ctx, String receiver) {
        AlarmManager am = getAlarmManager(ctx);
        Intent i = new Intent(receiver);
        PendingIntent pendingIntent = PendingIntent.getBroadcast(ctx, 0, i, PendingIntent.FLAG_NO_CREATE);
        am.cancel(pendingIntent);
    }

    /**
     * Set the duration alarm
     * 
     * @param ctx
     * @param receiver
     * @param duration
     */
    public static void sendRepeatAlarmBroadcast(Context ctx, Class<?> receiver, long duration) {
        Intent intent = new Intent(ctx, receiver);
        PendingIntent pendingIntent = PendingIntent.getBroadcast(ctx, 0, intent, PendingIntent.FLAG_CANCEL_CURRENT);

        long startTime = System.currentTimeMillis();
        AlarmManager am = getAlarmManager(ctx);
        am.setRepeating(AlarmManager.RTC_WAKEUP, startTime, duration, pendingIntent);
    }

    /**
     * Set the duration alarm
     * 
     * @param ctx
     * @param receiver
     * @param duration
     */
    public static void sendRepeatAlarmBroadcast(Context ctx, Intent intent, long duration) {
        PendingIntent pendingIntent = PendingIntent.getBroadcast(ctx, 0, intent, PendingIntent.FLAG_CANCEL_CURRENT);
        long startTime = System.currentTimeMillis();
        AlarmManager am = getAlarmManager(ctx);
        am.setRepeating(AlarmManager.RTC_WAKEUP, startTime, duration, pendingIntent);
    }

    /**
     * Set the duration alarm
     * 
     * @param ctx
     * @param receiver
     * @param duration
     */
    public static void sendRepeatAlarmBroadcast(Context ctx, long startTime, Intent intent, long duration) {
        PendingIntent pendingIntent = PendingIntent.getBroadcast(ctx, 0, intent, PendingIntent.FLAG_CANCEL_CURRENT);
        AlarmManager am = getAlarmManager(ctx);
        am.setRepeating(AlarmManager.RTC_WAKEUP, startTime, duration, pendingIntent);
    }

    /**
     * Set the duration alarm without device wakeup
     * 
     * @param ctx
     * @param receiver
     * @param duration
     */
    public static void sendRepeatAlarmBroadcastWithoutWakeUp(Context ctx, Intent intent, long duration) {
        PendingIntent pendingIntent = PendingIntent.getBroadcast(ctx, 0, intent, PendingIntent.FLAG_CANCEL_CURRENT);
        long startTime = System.currentTimeMillis();
        AlarmManager am = getAlarmManager(ctx);
        am.setRepeating(AlarmManager.RTC, startTime, duration, pendingIntent);
    }

    /**
     * Set the duration alarm
     * 
     * @param ctx
     * @param receiver
     * @param duration
     */
    public static void sendRepeatAlarmBroadcast(Context ctx, String receiver, long duration) {
        Intent intent = new Intent(receiver);
        PendingIntent pendingIntent = PendingIntent.getBroadcast(ctx, 0, intent, PendingIntent.FLAG_CANCEL_CURRENT);

        long startTime = System.currentTimeMillis();
        AlarmManager am = getAlarmManager(ctx);
        am.setRepeating(AlarmManager.RTC_WAKEUP, startTime, duration, pendingIntent);
    }
}
