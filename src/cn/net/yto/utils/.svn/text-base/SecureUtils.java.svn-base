package cn.net.yto.utils;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;

import org.xmlpull.v1.XmlSerializer;

import cn.net.yto.vo.SecureVO;

import android.content.Context;
import android.content.Intent;
import android.util.Xml;

public class SecureUtils {
	public static void setDefaultSecureSetting(Context context){
		SecureVO secureVO = new SecureVO();
		secureVO.setAdbPullEnable(true);
		secureVO.setAdbPushEnable(true);
		secureVO.setAppInstallEnable(true);
		secureVO.setCallInEnable(true);
		secureVO.setCallOutEnable(true);
		secureVO.setPhoneEnable(true);
		secureVO.setSmsEnable(true);
		secureVO.setSmsReceiveEnable(true);
		secureVO.setSmsSendEnable(true);
		secureVO.setNetSecureEnable(false);
		Intent wIntent = new Intent();
		wIntent.setAction("android.intent.action.CHANGE_SETTING");
		wIntent.putExtra("android.intent.extra.CHANGE_SETTING_CONTENT", getXmlByteArray(secureVO));
		context.sendBroadcast(wIntent);
	}
	
	public static void openAppInstall(Context context){
		SecureVO secureVO = new SecureVO();
		secureVO.setAdbPullEnable(true);
		secureVO.setAdbPushEnable(true);
		secureVO.setAppInstallEnable(true);
		secureVO.setCallInEnable(false);
		secureVO.setCallOutEnable(false);
		secureVO.setPhoneEnable(false);
		secureVO.setSmsEnable(false);
		secureVO.setSmsReceiveEnable(false);
		secureVO.setSmsSendEnable(false);
		// net secure enable false means you can use network
		secureVO.setNetSecureEnable(false);
		Intent wIntent = new Intent();
		wIntent.setAction("android.intent.action.CHANGE_SETTING");
		wIntent.putExtra("android.intent.extra.CHANGE_SETTING_CONTENT", getXmlByteArray(secureVO));
		context.sendBroadcast(wIntent);
	}
	
	public static void closeSecureSetting(Context context){
		SecureVO secureVO = new SecureVO();
		secureVO.setAdbPullEnable(true);
		secureVO.setAdbPushEnable(true);
		secureVO.setAppInstallEnable(true);
		secureVO.setCallInEnable(true);
		secureVO.setCallOutEnable(true);
		secureVO.setPhoneEnable(true);
		secureVO.setSmsEnable(true);
		secureVO.setSmsReceiveEnable(true);
		secureVO.setSmsSendEnable(true);
		// net secure enable true means can't use network, except url in white list
		secureVO.setNetSecureEnable(true);
		Intent wIntent = new Intent();
		wIntent.setAction("android.intent.action.CHANGE_SETTING");
		wIntent.putExtra("android.intent.extra.CHANGE_SETTING_CONTENT", getXmlByteArray(secureVO));
		context.sendBroadcast(wIntent);
	}
	
	private static byte[] getXmlByteArray(SecureVO secureVO) {
		OutputStreamWriter writer = null;
		try {
			// �����д��XML�ļ��������浽SD����
				ByteArrayOutputStream baos = new ByteArrayOutputStream();
				writer = new OutputStreamWriter(baos);

				XmlSerializer serializer = Xml.newSerializer();// ���л�
				serializer.setOutput(writer);// �����

				// ��ʼ�ĵ�
				serializer.startDocument("UTF-8", true);
				serializer.startTag(null, "map");

				// �绰����
				serializer.startTag(null, "boolean");
				serializer.attribute(null, "name", "pref_phone_on_key");
				serializer.attribute(null, "value",
						"" + secureVO.isPhoneEnable());
				serializer.endTag(null, "boolean");

				// �绰����
				serializer.startTag(null, "boolean");
				serializer.attribute(null, "name", "pref_callin_key");
				serializer.attribute(null, "value",
						"" + secureVO.isCallInEnable());
				serializer.endTag(null, "boolean");

				// �绰����
				serializer.startTag(null, "boolean");
				serializer.attribute(null, "name", "pref_callout_key");
				serializer.attribute(null, "value",
						"" + secureVO.isCallOutEnable());
				serializer.endTag(null, "boolean");

				// ���Ź���
				serializer.startTag(null, "boolean");
				serializer.attribute(null, "name", "pref_sms_on_key");
				serializer.attribute(null, "value",
						"" + secureVO.isSmsEnable());
				serializer.endTag(null, "boolean");

				// ���Ž���
				serializer.startTag(null, "boolean");
				serializer.attribute(null, "name", "pref_smsin_key");
				serializer.attribute(null, "value",
						"" + secureVO.isSmsReceiveEnable());
				serializer.endTag(null, "boolean");

				// ���ŷ���
				serializer.startTag(null, "boolean");
				serializer.attribute(null, "name", "pref_smsout_key");
				serializer.attribute(null, "value",
						"" + secureVO.isSmsSendEnable());
				serializer.endTag(null, "boolean");

				// �绰����
				serializer.startTag(null, "boolean");
				serializer
						.attribute(null, "name", "pref_phonewhitelist_on_key");
				serializer.attribute(null, "value",
						"" + secureVO.isCallWhiteListEnable());
				serializer.endTag(null, "boolean");

				// �绰�������
				serializer.startTag(null, "string");
				serializer.attribute(null, "name",
						"pref_phonewhitelist_set_key");
				serializer.text(secureVO.getCallWhiteListNumbers());
				serializer.endTag(null, "string");

				// ���Ű���
				serializer.startTag(null, "boolean");
				serializer.attribute(null, "name", "pref_smswhitelist_on_key");
				serializer.attribute(null, "value",
						"" + secureVO.isSmsWhiteListEnable());
				serializer.endTag(null, "boolean");

				// ���Ű������
				serializer.startTag(null, "string");
				serializer.attribute(null, "name", "pref_smswhitelist_set_key");
				serializer.text(secureVO.getSmsWhiteListNumbers());
				serializer.endTag(null, "string");

				// ����ֱ��
				serializer.startTag(null, "boolean");
				serializer.attribute(null, "name", "pref_smsshow_on_key");
				serializer.attribute(null, "value",
						"" + secureVO.isSmsShowEnable());
				serializer.endTag(null, "boolean");

				// ����ֱ�Ժ���
				serializer.startTag(null, "string");
				serializer.attribute(null, "name", "pref_smsshow_set_key");
				serializer.text(secureVO.getSmsShowNumbers());
				serializer.endTag(null, "string");

				// adb push
				serializer.startTag(null, "boolean");
				serializer.attribute(null, "name", "pref_adbpush_on_key");
				serializer.attribute(null, "value",
						"" + secureVO.isAdbPushEnable());
				serializer.endTag(null, "boolean");

				// adb pull
				serializer.startTag(null, "boolean");
				serializer.attribute(null, "name", "pref_adbpull_on_key");
				serializer.attribute(null, "value",
						"" + secureVO.isAdbPullEnable());
				serializer.endTag(null, "boolean");

				// Ӧ�ó���װ
				serializer.startTag(null, "boolean");
				serializer.attribute(null, "name", "pref_securityapp_on_key");
				serializer.attribute(null, "value",
						"" + secureVO.isAppInstallEnable());
				serializer.endTag(null, "boolean");

				// ���簲ȫ
				serializer.startTag(null, "boolean");
				serializer.attribute(null, "name", "pref_netsecurity_key");
				serializer.attribute(null, "value",
						"" + secureVO.isNetSecureEnable());
				serializer.endTag(null, "boolean");

				// ��ֹ��ַ
				serializer.startTag(null, "string");
				serializer.attribute(null, "name", "pref_netsecurity_set_key");
				serializer.text(secureVO.getPermitUrls());
				serializer.endTag(null, "string");

				serializer.endTag(null, "map");
				serializer.endDocument();
				writer.flush(); 
				return baos.toByteArray();
		} catch (IllegalArgumentException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if (writer != null) {
				try {
					writer.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
		return null;
	}
}
