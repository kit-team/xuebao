package cn.net.yto.application;

import android.app.Application;
import android.content.Context;
import android.content.SharedPreferences;
import android.content.pm.PackageManager.NameNotFoundException;
import android.os.Build;
import android.preference.PreferenceManager;
import android.telephony.TelephonyManager;
import cn.net.yto.R;
import cn.net.yto.biz.BasicDataManager;
import cn.net.yto.biz.OrderManager;
import cn.net.yto.biz.ReceiveManager;
import cn.net.yto.biz.SignedLogManager;
import cn.net.yto.biz.UserManager;
import cn.net.yto.common.Constants;
import cn.net.yto.dao.DatabaseHelper;
import cn.net.yto.engine.SignedLogReportTaskManager;
import cn.net.yto.net.UrlManager;
import cn.net.yto.ui.ToastUtils;
import cn.net.yto.utils.LogUtils;
import cn.net.yto.utils.ToastUtils;

public class AppContext extends Application {
	private static AppContext sAppContext = null;
	public static final String SHARE_PREFRENCE_NAME = "settings";
	private int mNetworkType;
	private Context mContext;
	public static int DEBUG_LEVEL = Constants.DEBUG_LEVEL_DEFAULT;
	public String mBatteryLevel = "";
	public static boolean networkAvailable = true;
	private DatabaseHelper mDatabaseHelper;
	private String mPdaServerUrl;
	public static boolean sLogEnable;
	private int mVersionCode;
	private String mVersionName;
	private String mImei;
	private OrderManager mOrderService;
	private SignedLogManager mSignedLogManager;

	@Override
	public void onCreate() {
		super.onCreate();

		sAppContext = this;
		mDatabaseHelper = new DatabaseHelper(getApplicationContext());

		try {
			mVersionName = getPackageManager().getPackageInfo(getPackageName(),
					0).versionName;
			mVersionCode = getPackageManager().getPackageInfo(getPackageName(),
					0).versionCode;
			mImei = ((TelephonyManager) getSystemService(Context.TELEPHONY_SERVICE))
					.getDeviceId();
		} catch (NameNotFoundException e) {
			e.printStackTrace();
		}

		SignedLogReportTaskManager.getInstance(this).run();
		ToastUtils.getInstance().init(this);
		UrlManager.setServerUrl(getAppContext().getString(
				R.string.default_server_url));
	}

	public void initGlobalVariable() {
		updateDefaultSettingValue();
	}

	public void updateDefaultSettingValue() {
		SharedPreferences sp = PreferenceManager
				.getDefaultSharedPreferences(mContext);

		mPdaServerUrl = sp.getString(Constants.KEY_PDA_SERVER_URL,
				mContext.getString(R.string.default_server_url));

		UrlManager.setServerUrl(mPdaServerUrl);

		sLogEnable = sp.getBoolean("log_key", true);

		LogUtils.setLogEnable(sLogEnable);
	}

	@Override
	public void onTerminate() {
		sAppContext = null;
		super.onTerminate();
	}

	public String getPdaType() {
		return Build.MODEL;
	}

	public String getVersionName() {
		return mVersionName;
	}

	public String getImei() {
		return mImei;
	}

	public int getVersionCode() {
		return mVersionCode;
	}

	public String getBatteryLevel() {
		return mBatteryLevel;
	}

	public void setBatteryLevel(String batteryLevel) {
		mBatteryLevel = batteryLevel;
	}

	public int getNetworkType() {
		return mNetworkType;
	}

	public void setNetworkType(int mNetworkType) {
		this.mNetworkType = mNetworkType;
	}

	public void setDefaultContext(Context context) {
		this.mContext = context;
		initGlobalVariable();
	}

	public Context getDefaultContext() {
		return mContext;
	}

	public static AppContext getAppContext() {
		return sAppContext;
	}

	public UserManager getUserService() {
		return UserManager.getInstance();
	}

	public OrderManager getOrderService() {
		if (mOrderService == null) {
			mOrderService = new OrderManager();
		}
		return mOrderService;
	}

	public BasicDataManager getBasicDataManager() {
		return BasicDataManager.getInstance();
	}

	public ReceiveManager getReceiveManager() {
		return ReceiveManager.getInstance();
	}

	public DatabaseHelper getDatabaseHelper() {
		return mDatabaseHelper;
	}

	public String getPdaNumber() {
		return Build.MODEL;
	}

	public void updateSharedPreference(String key, String value) {
		SharedPreferences sp = PreferenceManager
				.getDefaultSharedPreferences(mContext);
		SharedPreferences.Editor editor = sp.edit();
		editor.putString(key, value);
		editor.commit();
	}

	public void updateSharedPreference(String key, int value) {
		SharedPreferences sp = PreferenceManager
				.getDefaultSharedPreferences(mContext);
		SharedPreferences.Editor editor = sp.edit();
		editor.putInt(key, value);
		editor.commit();
	}

	public SignedLogManager getSignedLogManager() {
		if (mSignedLogManager == null) {
			mSignedLogManager = new SignedLogManager(mContext);
		}
		return mSignedLogManager;
	}
	
    public void startReportTask() {
//        SignedLogReportTaskManager.getInstance(getDefaultContext()).run();
    }
}
